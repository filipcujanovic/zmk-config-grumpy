#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define SYMBOLS 1
#define NAVIGATION 2
#define NUMBERS 3
#define ADJUST 4

#define CHAR_W 0
#define CHAR_E 1
#define CHAR_R 2
#define CHAR_U 5
#define CHAR_I 6
#define CHAR_A 8
#define CHAR_S 9
#define CHAR_D 10
#define CHAR_C 20
#define CHAR_V 21
#define CHAR_M 22
#define CHAR_COMMA 23
#define CHAR_SEMICOLON 17
#define CHAR_Z 18
#define CHAR_BACKSLASH 25

//   ____________________________  ____________________________
//  /       0 - w  |  1 - e  |  2 - r  |  3 - t  \/   4 - y |   5 - u |   6 - i |   7 - o      \
// |  8 - a  |  9 - s  | 10 - d  | 11 - f  | 12 - g  /\  13 - h |  14 - j |  15 - k |  16 - l | 17 - ;  |
// | 18 - z  | 19 - x  | 20 - c  | 21 - v       /  \       22 - m |  23 - , |  24 - . | 25 - /  |
//                      \  26  /    \  27  /
//                       ------      ------


// &lt {
//     quick_tap_ms = <170>;
// };

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};

#define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT, LAYERS) \
combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    require-prior-idle-ms = <110>; \
    layers = <LAYERS>; \
};

#define DOUBLE_TAP(NAME, BINDINGS ) \
double_tap_##NAME: double_tap_key_##NAME { \
    compatible = "zmk,behavior-tap-dance"; \
    #binding-cells = <0>; \
    tapping-term-ms = <200>; \
    bindings = <BINDINGS>; \
};

/ {
    combos {
        compatible = "zmk,combos";
        COMBO(sqt, &kp SQT, CHAR_W CHAR_E, 15, DEFAULT SYMBOLS NAVIGATION NUMBERS ADJUST)
        COMBO(esc, &kp ESC, CHAR_E CHAR_R, 15, DEFAULT SYMBOLS NAVIGATION NUMBERS ADJUST)
        COMBO(caps_word, &caps_word, CHAR_Z CHAR_BACKSLASH, 50, DEFAULT SYMBOLS NAVIGATION NUMBERS ADJUST)
        COMBO(bspc, &kp BSPC, CHAR_U CHAR_I, 50, DEFAULT SYMBOLS NAVIGATION NUMBERS ADJUST)
        COMBO(rbrc, &kp RBRC, CHAR_C CHAR_V, 50, SYMBOLS NAVIGATION)
        COMBO(rbkt, &kp RBKT, CHAR_M CHAR_COMMA, 50, SYMBOLS NAVIGATION)
        COMBO(tmux_prefix, &kp LC(S), CHAR_A CHAR_S, 15, DEFAULT)
        COMBO(tmux_session_prefix, &kp LA(S), CHAR_S CHAR_D, 15, DEFAULT)
    };
};


/ {

    behaviors {
        isk: intuitive_sk {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };
};

/ {

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                      &kp W &kp E &kp R  &kp T     &kp Y   &kp U &kp I     &kp O
                &kp A &kp S &kp D &kp F  &kp G     &kp H   &kp J &kp K     &kp L   &kp SEMI
                &kp Z &kp X &kp C &kp V                    &kp M &kp COMMA &kp DOT &kp SLASH
                                  &kp ENTER                &kp SPC
            >;
        };

        symbol_layer {
            bindings = <
                          &kp LT    &kp GT   &kp UNDER &kp QMARK    &kp DQT   &kp TILDE &kp PIPE    &kp GRAVE
                &kp EXCL  &kp AT    &kp HASH &kp DLLR  &kp PRCNT    &kp CARET &kp AMPS &kp ASTERISK &kp LPAR  &kp RPAR
                &kp EQUAL &kp MINUS &kp PLUS &kp LBRC                         &kp LBKT &kp SQT      &kp COLON &kp BSLH
                                             &trans                           &trans
            >;
        };

        navigation_layer {
            bindings = <
                           &mo ADJUST &none    &none       &none           &kp C_PREVIOUS &kp C_VOLUME_DOWN    &kp C_VOLUME_UP      &kp C_NEXT
                &sk LCTRL  &sk LALT  &sk LGUI  &skq LSHIFT &kp TAB         &kp LEFT       &kp DOWN             &kp UP               &kp RIGHT         &kp LA(BSPC)
                &kp LG(Z)  &kp LG(X) &kp LG(C) &kp LG(V)                                  &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_INC &kp C_PLAY_PAUSE  &none
                                               &trans                                     &trans
            >;
        };

        numbers_layer {
            bindings = <
                       &kp F2 &kp F3         &kp F4         &kp F5        &kp F6  &kp F7  &kp F8  &kp F9
                &kp N1 &kp N2 &kp N3         &kp N4         &kp N5        &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
                &none  &none  &kp LG(LS(N4)) &kp LG(LS(N5))                       &none   &none   &none   &none
                                             &trans                               &trans

            >;
        };

        adjust_layer {
            bindings = <
                   &none  &none  &none   &bootloader       &none        &none        &none        &none
            &none  &none  &none  &none   &none             &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
            &none  &none  &none  &none                                  &bt BT_CLR   &none        &none        &none
                                 &trans                                 &trans
            >;
        };

    };
};
